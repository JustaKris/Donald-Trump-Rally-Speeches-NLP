[project]
name = "dt-rally-speeches-nlp"
version = "0.1.0"
description = "NLP exercise on a dataset of rally speeches from Donald Trump's first presidential campaign."
authors = [
    {name = "Kristiyan Bonev"}
]
readme = "README.md"
requires-python = ">=3.11,<3.15"
dependencies = [
    "numpy (>=2.3.4,<3.0.0)",
    "pandas (>=2.3.3,<3.0.0)",
    "matplotlib (>=3.10.7,<4.0.0)",
    "seaborn (>=0.13.2,<0.14.0)",
    "wordcloud (>=1.9.4,<2.0.0)",
    "scikit-learn (>=1.7.2,<2.0.0)",
    "transformers (>=4.57.1,<5.0.0)",
    "nltk (>=3.9.2,<4.0.0)",
    "tqdm (>=4.67.1,<5.0.0)",
    "plotly (>=6.3.1,<7.0.0)",
    "jupyterlab (>=4.4.10,<5.0.0)",
    "ipykernel (>=7.0.1,<8.0.0)",
    "ipywidgets (>=8.1.7,<9.0.0)",
    "widgetsnbextension (>=4.0.14,<5.0.0)",
    "tensorflow (>=2.20.0,<3.0.0)",
    "scipy (>=1.16.2,<2.0.0)",
    "huggingface-hub (>=0.36.0,<0.37.0)",
    "tf-keras (>=2.20.1,<3.0.0)",
    "certifi (>=2025.10.5,<2026.0.0)",
    "fastapi (>=0.115.0,<0.116.0)",
    "uvicorn[standard] (>=0.32.0,<0.33.0)",
    "python-multipart (>=0.0.12,<0.0.13)",
    "httpx (>=0.28.0,<0.29.0)"
]

[tool.poetry]
"package-mode" = false

# Development dependencies
[dependency-groups]
dev = [
    "pytest (>=8.3.0,<9.0.0)",
    "pytest-cov (>=6.0.0,<7.0.0)",
    "pytest-asyncio (>=0.24.0,<0.25.0)",
    "flake8 (>=7.1.0,<8.0.0)",
    "flake8-pyproject (>=1.2.3,<2.0.0)",
    "black (>=24.0.0,<25.0.0)",
    "mypy (>=1.13.0,<2.0.0)",
    "isort (>=5.13.0,<6.0.0)"
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | notebooks
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["notebooks/*", ".venv/*", "venv/*"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
strict_optional = false
ignore_missing_imports = true

# Flake8 configuration
[tool.flake8]
max-line-length = 100
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".tox",
    ".pytest_cache",
    "reports",
    "notebooks",
    ".ipynb_checkpoints",
]
ignore = ["E203", "E266", "E501", "W503", "W504", "F401"]
max-complexity = 15
select = ["E", "W", "F", "C", "N"]
per-file-ignores = [
    "__init__.py:F401,E402",
    "src/__init__.py:F401",
]

# Pytest configuration
[tool.pytest.ini_options]
# Test discovery patterns
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test paths
testpaths = ["tests"]

# Additional options
addopts = [
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:reports/coverage/html",
    "--cov-report=xml:reports/coverage/coverage.xml",
    "--cov-fail-under=70",
    "--strict-markers",
    "--disable-warnings",
]

# Asyncio settings
asyncio_mode = "auto"

# Markers for categorizing tests
markers = [
    "unit: Unit tests for individual functions",
    "integration: Integration tests for API endpoints",
    "slow: Tests that take longer to run",
    "requires_model: Tests that require ML model loading",
]

# Ignore directories
norecursedirs = [
    ".git",
    ".tox",
    "dist",
    "build",
    "*.egg",
    "reports",
    ".venv",
    "venv",
    ".pytest_cache",
    "__pycache__",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
data_file = "reports/coverage/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "reports/coverage/html"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
